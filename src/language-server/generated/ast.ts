/******************************************************************************
 * This file was generated by langium-cli 0.5.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable @typescript-eslint/array-type */
/* eslint-disable @typescript-eslint/no-empty-interface */
import { AstNode, AstReflection, Reference, ReferenceInfo, isAstNode, TypeMetaData } from 'langium';

export type ExportableElement = Pipeline | Valuetype;

export const ExportableElement = 'ExportableElement';

export function isExportableElement(item: unknown): item is ExportableElement {
    return reflection.isInstance(item, ExportableElement);
}

export type NamespaceElement = Export | Import | Namespace | Pipeline | RuntimeParameter | Valuetype;

export const NamespaceElement = 'NamespaceElement';

export function isNamespaceElement(item: unknown): item is NamespaceElement {
    return reflection.isInstance(item, NamespaceElement);
}

export type PipelineElement = Block | Flow | RuntimeParameter | Valuetype;

export const PipelineElement = 'PipelineElement';

export function isPipelineElement(item: unknown): item is PipelineElement {
    return reflection.isInstance(item, PipelineElement);
}

export type QualifiedName = string;

export interface Attribute extends AstNode {
    readonly $container: Block | Valuetype;
    name: string
    runtimeParameter?: Reference<RuntimeParameter>
    value?: boolean | number | string
}

export const Attribute = 'Attribute';

export function isAttribute(item: unknown): item is Attribute {
    return reflection.isInstance(item, Attribute);
}

export interface Block extends AstNode {
    readonly $container: Model | Namespace | Pipeline;
    attributes: Array<Attribute>
    inputs: Array<Input>
    name: string
    outputs: Array<Output>
    superBlock: 'DatabaseSink' | 'GuardBlock' | 'LogSink' | 'SelectionBlock' | 'SourceBlock' | 'TableBlock'
}

export const Block = 'Block';

export function isBlock(item: unknown): item is Block {
    return reflection.isInstance(item, Block);
}

export interface Export extends AstNode {
    readonly $container: Model | Namespace | Pipeline;
    element: Reference<ExportableElement>
}

export const Export = 'Export';

export function isExport(item: unknown): item is Export {
    return reflection.isInstance(item, Export);
}

export interface Flow extends AstNode {
    readonly $container: Model | Namespace | Pipeline;
    from: Reference<Output>
    name: string
    to: Reference<Input>
}

export const Flow = 'Flow';

export function isFlow(item: unknown): item is Flow {
    return reflection.isInstance(item, Flow);
}

export interface Import extends AstNode {
    readonly $container: Model | Namespace | Pipeline;
    valuetype: Reference<ExportableElement>
}

export const Import = 'Import';

export function isImport(item: unknown): item is Import {
    return reflection.isInstance(item, Import);
}

export interface Input extends AstNode {
    readonly $container: Block;
    name: string
}

export const Input = 'Input';

export function isInput(item: unknown): item is Input {
    return reflection.isInstance(item, Input);
}

export interface Model extends AstNode {
    namespaces: Array<Namespace>
}

export const Model = 'Model';

export function isModel(item: unknown): item is Model {
    return reflection.isInstance(item, Model);
}

export interface Namespace extends AstNode {
    readonly $container: Model | Namespace | Pipeline;
    elements: Array<NamespaceElement>
    name: string
}

export const Namespace = 'Namespace';

export function isNamespace(item: unknown): item is Namespace {
    return reflection.isInstance(item, Namespace);
}

export interface Output extends AstNode {
    readonly $container: Block;
    name: string
}

export const Output = 'Output';

export function isOutput(item: unknown): item is Output {
    return reflection.isInstance(item, Output);
}

export interface Pipeline extends AstNode {
    readonly $container: Model | Namespace | Pipeline;
    elements: Array<PipelineElement>
    name: string
}

export const Pipeline = 'Pipeline';

export function isPipeline(item: unknown): item is Pipeline {
    return reflection.isInstance(item, Pipeline);
}

export interface RuntimeParameter extends AstNode {
    readonly $container: Model | Namespace | Pipeline;
    name: string
}

export const RuntimeParameter = 'RuntimeParameter';

export function isRuntimeParameter(item: unknown): item is RuntimeParameter {
    return reflection.isInstance(item, RuntimeParameter);
}

export interface Valuetype extends AstNode {
    readonly $container: Model | Namespace | Pipeline;
    attributes: Array<Attribute>
    hasSuperTypeInteger: boolean
    hasSuperTypeString: boolean
    name: string
    superType?: Reference<Valuetype>
}

export const Valuetype = 'Valuetype';

export function isValuetype(item: unknown): item is Valuetype {
    return reflection.isInstance(item, Valuetype);
}

export type OpenDataLanguageAstType = 'Attribute' | 'Block' | 'Export' | 'ExportableElement' | 'Flow' | 'Import' | 'Input' | 'Model' | 'Namespace' | 'NamespaceElement' | 'Output' | 'Pipeline' | 'PipelineElement' | 'RuntimeParameter' | 'Valuetype';

export class OpenDataLanguageAstReflection implements AstReflection {

    getAllTypes(): string[] {
        return ['Attribute', 'Block', 'Export', 'ExportableElement', 'Flow', 'Import', 'Input', 'Model', 'Namespace', 'NamespaceElement', 'Output', 'Pipeline', 'PipelineElement', 'RuntimeParameter', 'Valuetype'];
    }

    isInstance(node: unknown, type: string): boolean {
        return isAstNode(node) && this.isSubtype(node.$type, type);
    }

    isSubtype(subtype: string, supertype: string): boolean {
        if (subtype === supertype) {
            return true;
        }
        switch (subtype) {
            case Block:
            case Flow: {
                return this.isSubtype(PipelineElement, supertype);
            }
            case Export:
            case Import:
            case Namespace: {
                return this.isSubtype(NamespaceElement, supertype);
            }
            case Pipeline: {
                return this.isSubtype(NamespaceElement, supertype) || this.isSubtype(ExportableElement, supertype);
            }
            case RuntimeParameter: {
                return this.isSubtype(NamespaceElement, supertype) || this.isSubtype(PipelineElement, supertype);
            }
            case Valuetype: {
                return this.isSubtype(NamespaceElement, supertype) || this.isSubtype(ExportableElement, supertype) || this.isSubtype(PipelineElement, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'Attribute:runtimeParameter': {
                return RuntimeParameter;
            }
            case 'Export:element': {
                return ExportableElement;
            }
            case 'Flow:from': {
                return Output;
            }
            case 'Flow:to': {
                return Input;
            }
            case 'Import:valuetype': {
                return ExportableElement;
            }
            case 'Valuetype:superType': {
                return Valuetype;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case 'Block': {
                return {
                    name: 'Block',
                    mandatory: [
                        { name: 'attributes', type: 'array' },
                        { name: 'inputs', type: 'array' },
                        { name: 'outputs', type: 'array' }
                    ]
                };
            }
            case 'Model': {
                return {
                    name: 'Model',
                    mandatory: [
                        { name: 'namespaces', type: 'array' }
                    ]
                };
            }
            case 'Namespace': {
                return {
                    name: 'Namespace',
                    mandatory: [
                        { name: 'elements', type: 'array' }
                    ]
                };
            }
            case 'Pipeline': {
                return {
                    name: 'Pipeline',
                    mandatory: [
                        { name: 'elements', type: 'array' }
                    ]
                };
            }
            case 'Valuetype': {
                return {
                    name: 'Valuetype',
                    mandatory: [
                        { name: 'attributes', type: 'array' },
                        { name: 'hasSuperTypeInteger', type: 'boolean' },
                        { name: 'hasSuperTypeString', type: 'boolean' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}

export const reflection = new OpenDataLanguageAstReflection();

/******************************************************************************
 * This file was generated by langium-cli 0.5.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable @typescript-eslint/array-type */
/* eslint-disable @typescript-eslint/no-empty-interface */
import { AstNode, AstReflection, Reference, ReferenceInfo, isAstNode, TypeMetaData } from 'langium';

export type Selection = ColumnSelection | RowSelection;

export const Selection = 'Selection';

export function isSelection(item: unknown): item is Selection {
    return reflection.isInstance(item, Selection);
}

export type Type = 'decimal' | 'integer' | 'text';

export interface Block extends AstNode {
    readonly $container: Model;
    name: string
    type: CSVFileExtractor | PostgresLoader | SchemaValidator
}

export const Block = 'Block';

export function isBlock(item: unknown): item is Block {
    return reflection.isInstance(item, Block);
}

export interface ColumnSelection extends AstNode {
    readonly $container: Schema;
    columnId: string
    type: Type
}

export const ColumnSelection = 'ColumnSelection';

export function isColumnSelection(item: unknown): item is ColumnSelection {
    return reflection.isInstance(item, ColumnSelection);
}

export interface CSVFileExtractor extends AstNode {
    readonly $container: Block;
    url: string
}

export const CSVFileExtractor = 'CSVFileExtractor';

export function isCSVFileExtractor(item: unknown): item is CSVFileExtractor {
    return reflection.isInstance(item, CSVFileExtractor);
}

export interface Model extends AstNode {
    blocks: Array<Block>
    pipes: Array<Pipe>
    schemas: Array<Schema>
}

export const Model = 'Model';

export function isModel(item: unknown): item is Model {
    return reflection.isInstance(item, Model);
}

export interface Pipe extends AstNode {
    readonly $container: Model;
    from: Reference<Block>
    to: Reference<Block>
}

export const Pipe = 'Pipe';

export function isPipe(item: unknown): item is Pipe {
    return reflection.isInstance(item, Pipe);
}

export interface PostgresLoader extends AstNode {
    readonly $container: Block;
    uri: string
}

export const PostgresLoader = 'PostgresLoader';

export function isPostgresLoader(item: unknown): item is PostgresLoader {
    return reflection.isInstance(item, PostgresLoader);
}

export interface RowSelection extends AstNode {
    readonly $container: Schema;
    header: boolean
    rowId: number
    type: Type
}

export const RowSelection = 'RowSelection';

export function isRowSelection(item: unknown): item is RowSelection {
    return reflection.isInstance(item, RowSelection);
}

export interface Schema extends AstNode {
    readonly $container: Model;
    name: string
    selections: Array<Selection>
}

export const Schema = 'Schema';

export function isSchema(item: unknown): item is Schema {
    return reflection.isInstance(item, Schema);
}

export interface SchemaValidator extends AstNode {
    readonly $container: Block;
    schema: Reference<Schema>
}

export const SchemaValidator = 'SchemaValidator';

export function isSchemaValidator(item: unknown): item is SchemaValidator {
    return reflection.isInstance(item, SchemaValidator);
}

export type OpenDataLanguageAstType = 'Block' | 'CSVFileExtractor' | 'ColumnSelection' | 'Model' | 'Pipe' | 'PostgresLoader' | 'RowSelection' | 'Schema' | 'SchemaValidator' | 'Selection';

export class OpenDataLanguageAstReflection implements AstReflection {

    getAllTypes(): string[] {
        return ['Block', 'CSVFileExtractor', 'ColumnSelection', 'Model', 'Pipe', 'PostgresLoader', 'RowSelection', 'Schema', 'SchemaValidator', 'Selection'];
    }

    isInstance(node: unknown, type: string): boolean {
        return isAstNode(node) && this.isSubtype(node.$type, type);
    }

    isSubtype(subtype: string, supertype: string): boolean {
        if (subtype === supertype) {
            return true;
        }
        switch (subtype) {
            case ColumnSelection:
            case RowSelection: {
                return this.isSubtype(Selection, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'Pipe:from': {
                return Block;
            }
            case 'Pipe:to': {
                return Block;
            }
            case 'SchemaValidator:schema': {
                return Schema;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case 'Model': {
                return {
                    name: 'Model',
                    mandatory: [
                        { name: 'blocks', type: 'array' },
                        { name: 'pipes', type: 'array' },
                        { name: 'schemas', type: 'array' }
                    ]
                };
            }
            case 'RowSelection': {
                return {
                    name: 'RowSelection',
                    mandatory: [
                        { name: 'header', type: 'boolean' }
                    ]
                };
            }
            case 'Schema': {
                return {
                    name: 'Schema',
                    mandatory: [
                        { name: 'selections', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}

export const reflection = new OpenDataLanguageAstReflection();
